#!/usr/bin/env python3
"""
下载预编译的 DemBones 可执行文件
=============================

这个脚本会尝试下载预编译的 DemBones 可执行文件
如果失败，会指导用户如何编译
"""

import os
import sys
import urllib.request
import subprocess

def download_precompiled_dembones():
    """尝试下载预编译的 DemBones"""
    print("=== 尝试下载预编译的 DemBones ===")
    
    # 一些可能的预编译版本链接
    download_urls = [
        # 这些是示例，实际可能需要查找真实的预编译版本
        "https://github.com/electronicarts/dem-bones/releases/download/v1.0.0/dembones-windows.exe",
        "https://github.com/electronicarts/dem-bones/releases/download/latest/DemBones.exe",
    ]
    
    for url in download_urls:
        try:
            print(f"尝试从 {url} 下载...")
            urllib.request.urlretrieve(url, "demBones.exe")
            
            # 测试下载的文件
            if test_dembones_executable("demBones.exe"):
                print("✓ 下载并验证成功!")
                return True
            else:
                print("❌ 下载的文件无法运行")
                if os.path.exists("demBones.exe"):
                    os.remove("demBones.exe")
                    
        except Exception as e:
            print(f"❌ 下载失败: {e}")
            continue
    
    return False

def test_dembones_executable(exe_path):
    """测试 DemBones 可执行文件"""
    try:
        result = subprocess.run([exe_path, "--help"], 
                              capture_output=True, timeout=10, text=True)
        # 检查是否是有效的 DemBones 可执行文件
        output = (result.stdout + result.stderr).lower()
        return "dembones" in output or "usage" in output or result.returncode == 0
    except:
        return False

def create_simple_dembones_stub():
    """创建一个简单的 DemBones 存根用于测试"""
    print("\n=== 创建 DemBones 测试存根 ===")
    
    stub_content = '''@echo off
echo DemBones Test Stub
echo This is a placeholder for testing purposes
echo Input file: %1
echo Output file: %2

REM 创建一个简单的输出文件
echo # DemBones Output (Stub) > %2
echo # This is generated by a test stub >> %2
echo w 0.8 0.2 >> %2
echo w 0.7 0.3 >> %2
echo w 0.6 0.4 >> %2
echo w 0.5 0.5 >> %2
echo w 0.4 0.6 >> %2
echo w 0.3 0.7 >> %2
echo w 0.2 0.8 >> %2
echo w 0.1 0.9 >> %2

exit /b 0
'''
    
    try:
        with open("demBones.bat", "w") as f:
            f.write(stub_content)
        
        print("✓ 创建了 demBones.bat 测试存根")
        print("  这只是一个测试存根，会生成简单的权重数据")
        print("  用于验证整个流程是否正常工作")
        
        return True
        
    except Exception as e:
        print(f"❌ 创建存根失败: {e}")
        return False

def main():
    print("DemBones 下载脚本")
    print("=" * 30)
    
    # 检查是否已经有 DemBones
    existing_paths = ["demBones.exe", "DemBones.exe", "demBones.bat"]
    for path in existing_paths:
        if os.path.exists(path):
            if test_dembones_executable(path):
                print(f"✓ 已找到可用的 DemBones: {path}")
                return True
            else:
                print(f"⚠️ 找到 {path} 但无法运行")
    
    # 尝试下载预编译版本
    if download_precompiled_dembones():
        return True
    
    print("\n❌ 无法下载预编译版本")
    print("\n选择:")
    print("1. 手动下载并编译 DemBones")
    print("2. 创建测试存根以验证流程")
    print("3. 直接使用简化蒙皮权重（无需 DemBones）")
    
    choice = input("\n请选择 (1/2/3): ").strip()
    
    if choice == "1":
        print("\n手动编译指南:")
        print("1. 安装依赖:")
        print("   - CMake: https://cmake.org/download/")
        print("   - Git: https://git-scm.com/download/")
        print("   - Visual Studio: https://visualstudio.microsoft.com/downloads/")
        print("\n2. 下载源码:")
        print("   git clone https://github.com/electronicarts/dem-bones.git")
        print("\n3. 编译:")
        print("   cd dem-bones")
        print("   mkdir build && cd build")
        print("   cmake ..")
        print("   cmake --build . --config Release")
        print("\n4. 复制可执行文件到当前目录")
        
    elif choice == "2":
        return create_simple_dembones_stub()
        
    elif choice == "3":
        print("\n✓ 可以直接使用 complete_vv_pipeline.py")
        print("  系统会自动使用简化蒙皮权重算法")
        return True
    
    return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n🎉 设置完成!")
        print("现在可以使用 complete_vv_pipeline.py 了")
    else:
        print("\n❌ 设置失败")
    
    sys.exit(0 if success else 1)
